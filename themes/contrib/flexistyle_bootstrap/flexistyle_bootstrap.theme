<?php

/**
 * @file
 * Functions to support theming in the FlexiStyle Bootstrap theme.
 */

use Drupal\Core\Link;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Render\MarkupInterface;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function flexistyle_bootstrap_preprocess_html(array &$variables): void {
  $variables['global_style'] = theme_get_setting('global_style');

  // Bootstrap settings.
  $variables['bootstrap'] = $bootstrap = theme_get_setting('bootstrap');
  $variables['bootstrap_local'] = $bootstrap_local = theme_get_setting('bootstrap_local');
  $variables['bootstrap_cdn'] = $bootstrap_cdn = theme_get_setting('bootstrap_cdn');
  if ($bootstrap == 'local') {
    if ($bootstrap_local) {
      $variables['#attached']['library'][] = 'flexistyle_bootstrap/' . $bootstrap_local;
    }
  }
  elseif ($bootstrap == 'cdn') {
    if ($bootstrap_cdn) {
      $variables['#attached']['library'][] = 'flexistyle_bootstrap/cdn-' . $bootstrap_cdn;
    }
  }
  elseif ($bootstrap == 'libraries') {
    $variables['#attached']['library'][] = 'flexistyle_bootstrap/bs-libraries';
  }

  // Theme settings for Global Fonts.
  $local_fonts = theme_get_setting('local_fonts');
  $google_fonts = theme_get_setting('google_fonts');
  if ($local_fonts != 'none') {
    $variables['attributes']['class'][] = $local_fonts . '-regular';
    $variables['#attached']['library'][] = 'flexistyle_bootstrap/' . $local_fonts;
  }
  if ($google_fonts != 'none') {
    $variables['attributes']['class'][] = $google_fonts . '-regular';
    $variables['#attached']['library'][] = 'flexistyle_bootstrap/' . $google_fonts;
  }

  // Theme settings for Global Icons.
  $variables['icons'] = $icons = theme_get_setting('global_icons');
  $variables['fontawesome'] = $fontawesome = theme_get_setting('global_icons_fontawesome');
  if ($icons == 'fontawesome') {
    if ($fontawesome) {
      $variables['#attached']['library'][] = 'flexistyle_bootstrap/' . $fontawesome;
    }
  }
  else {
    $variables['#attached']['library'][] = 'flexistyle_bootstrap/' . $icons;
  }
}

/**
 * Implements hook_preprocess_HOOK() for Page document templates.
 */
function flexistyle_bootstrap_preprocess_page(array &$variables): void {
  $variables['icons'] = $icons = theme_get_setting('global_icons');
  $variables['container'] = theme_get_setting('bootstrap_container');

  $variables['top_header_classes'] = theme_get_setting('top_header_classes');

  // Theme setting variables for Header.
  $variables['header_position'] = theme_get_setting('header_position');
  $variables['header_style'] = theme_get_setting('header_style');
  $variables['header_navbar_bg'] = theme_get_setting('header_navbar_bg');
  if ($variables['header_navbar_bg'] == 'bg-black' || $variables['header_navbar_bg'] == 'bg-dark' || $variables['header_navbar_bg'] == 'bg-purple' || $variables['header_navbar_bg'] == 'bg-purple-dark') {
    $variables['header_navbar_dark'] = 'navbar-dark';
    $variables['header_text_dark'] = 'text-bg-dark';
    $variables['header_close_white'] = 'btn-close-white';
  }
  $variables['header_classes'] = theme_get_setting('header_classes');

  // Theme setting variables for Footer.
  $variables['footer_bg'] = theme_get_setting('footer_bg');
  $variables['footer_classes'] = theme_get_setting('footer_classes');
  $variables['footer_top_classes'] = theme_get_setting('footer_top_classes');
  $variables['footer_bottom_bg'] = theme_get_setting('footer_bottom_bg');
  $variables['footer_bottom_classes'] = theme_get_setting('footer_bottom_classes');
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function flexistyle_bootstrap_preprocess_block(array &$variables): void {
  $variables['sidebar_block_bg'] = $sidebar_block_bg = theme_get_setting('sidebar_block_bg');
  $variables['sidebar_block_classes'] = $sidebar_block_classes = theme_get_setting('sidebar_block_classes');
  if (!empty($variables['elements']['#id'])) {
    /** @var \Drupal\block\BlockInterface $block */
    $block = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->load($variables['elements']['#id']);
    if ($block) {
      $region = $block->getRegion();
      if ($variables['base_plugin_id']) {
        $variables['content']['#attributes']['region'] = $region;
        if ($region === 'sidebar_first' || $region === 'sidebar_second') {
          $variables['attributes']['class'][] = $sidebar_block_bg;
          $variables['attributes']['class'][] = $sidebar_block_classes;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task.html.twig.
 */
function flexistyle_bootstrap_preprocess_menu_local_task(&$variables): void {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action.html.twig.
 */
function flexistyle_bootstrap_preprocess_menu_local_action(&$variables): void {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_form_alter() for adding classes, markup and placeholders to the forms.
 */
function flexistyle_bootstrap_form_alter(&$form, &$form_state, $form_id): void {
  if ($form_id == 'search_block_form') {
    $form['keys']['#attributes']['placeholder'] = t('Search');
  }
  if ($form_id == 'user_login_form') {
    $form['markup'] = [
      '#markup' => '<div class="text-end reset-pass"><a href="/user/password" title="Forgot password?" class="request-password-link">Forgot password?</a></div>',
    ];
    $form['name']['#attributes']['placeholder'] = t('Username or email address');
    $form['pass']['#attributes']['placeholder'] = t('Password');
  }
  if ($form_id == 'user_pass') {
    $form['name']['#attributes']['placeholder'] = t('Entetr your email address');
  }
}

/**
 * Implements hook_preprocess_HOOK() for form elements.
 */
function flexistyle_bootstrap_preprocess_form_element(&$variables) {
  if (isset($variables['label']['#title'])) {
    if (is_object($variables['label']['#title']) && !$variables['label']['#title'] instanceof MarkupInterface) {
      $variables['input_title'] = NULL;
    }
    elseif (is_object($variables['label']['#title'])) {
      $variables['input_title'] = $variables['label']['#title'];
    }
    else {
      $variables['input_title'] = $variables['label']['#title'];
    }
  }
  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function flexistyle_bootstrap_theme_suggestions_form_alter(array &$suggestions, array &$variables, $hook): void {
  if ($hook == 'form' & !empty($variables['element']['#id'])) {
    $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page templates.
 */
function flexistyle_bootstrap_theme_suggestions_page_alter(array &$suggestions, array &$variables): void {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for user templates.
 */
function flexistyle_bootstrap_theme_suggestions_user_alter(array &$suggestions, array &$variables, $hook): void {
  if ($hook == 'user' & !empty($variables['elements']['#view_mode'])) {
    $view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
    $user_id = \Drupal::service('current_user')->id();
    $suggestions[] = 'user__' . $view_mode;
    $suggestions[] = 'user__' . $user_id;
    $suggestions[] = 'user__' . $user_id . '__' . $view_mode;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for views templates.
 */
function flexistyle_bootstrap_theme_suggestions_views_view_alter(array &$suggestions, array &$variables, $hook): void {
  $view_id = $variables['view']->id();
  $suggestions[] = 'views__' . $view_id;
}
